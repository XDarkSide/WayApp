@page "/"
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text.Json;
@using System.Threading.Tasks;
@inject IJSRuntime JSRuntime

<head>
    <!-- Посилання на CDN-версію Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
</head>

<div class="d-flex justify-content-center">
    <h3 class="mt-4 mb-3">WayApp</h3>
</div>
<div class="d-flex justify-content-center">
    <button class="btn btn-primary mb-3" @onclick="AddCourse">Add goal</button>
</div>

<div class="container">
@if (showModal)
{
    <!-- Modal for adding course -->
    <div class="modal" style="display: @(showModal ? "block" : "none")">
        <!-- Modal content -->
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Add goal</h4>
                    <button type="button" class="close" data-dismiss="modal" @onclick="CloseModal">&times;</button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="courseName">Name:</label>
                            <input id="courseName" @bind="newCourse.Name" class="form-control" placeholder="Course Name" />
                        </div>
                        <div class="form-group">
                            <label for="endDate">Deadline:</label>
                            <input id="endDate" @bind="newCourse.EndDate" class="form-control" type="date" />
                        </div>
                        <div class="form-group">
                            <label for="durationHours">Duration Hours:</label>
                            <input id="durationHours" @bind="newCourse.DurationHours" class="form-control" type="number" placeholder="Duration Hours" min="0" />
                        </div>
                        <div class="form-group">
                            <label for="durationMinutes">Duration Minutes:</label>
                            <input id="durationMinutes" @bind="newCourse.DurationMinutes" class="form-control" type="number" placeholder="Duration Minutes" min="0" max="60" />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveCourse">Save</button>
                </div>
            </div>
        </div>
    </div>
}

<table class="table table-striped">
    <thead class="thead-dark">
        <tr>
            <th>Name</th>
            <th>Deadline</th>
            <th>Days left</th>
            <th>Duration</th>
            <th>Progress</th>
            <th>Progress for today (h/m)</th>
            <th>%</th>
            <th>Study Time Needed</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var course in courses)
        {
            <tr>
                <td>@course.Name</td>
                <td>@course.EndDate.ToString("MM/dd/yyyy")</td>
                <td>@DaysLeft(course)</td>
                    <td>@course.DurationHours hours @course.DurationMinutes minutes</td>
                <td>
                    <progress max="@TotalDurationInMinutes(course)" value="@CompletedDurationInMinutes(course)" class="progress"></progress>
                </td>
                <td>
                    <div class="input-group">
                        <input @bind="course.ProgressToAddHours" type="number" class="form-control" placeholder="Progress Hours" min="0" />
                        <input @bind="course.ProgressToAddMinutes" type="number" class="form-control" placeholder="Progress Minutes" min="0" />
                        <div class="input-group-append">
                            <button class="btn btn-outline-primary" @onclick="@( () => UpdateProgress(course) )">Update Progress</button>
                        </div>
                    </div>
                </td>
                <td>@ProgressPercentage(course)</td>
                <td>@StudyTimeNeeded(course)</td>
                <td>
                    <button class="btn btn-primary" @onclick="@( () => ShowProgressLogs(course) )">Logs</button>
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="@( () => DeleteCourse(course) )">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Modal for progress logs -->
@if (showLogsModal)
{
    <div class="modal" style="display: @(showLogsModal ? "block" : "none")">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Progress Logs</h4>
                    <button type="button" class="close" data-dismiss="modal" @onclick="CloseLogsModal">&times;</button>
                </div>
                <div class="modal-body">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Progress Added</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in selectedCourse.ProgressLogs.OrderByDescending(log => log.Date))
                            {
                                <tr style="background-color: @GetLogBackgroundColor(log, selectedCourse)">
                                    <td style="color: white">@log.Date.ToString("MM/dd/yyyy")</td>
                                    <td style="color: white">@GetFormattedTime(log.ProgressAdded)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseLogsModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}
</div>
@code {
    List<Course> courses = new List<Course>();
    Course newCourse = new Course();
    bool showModal = false;
    bool showLogsModal = false;
    Course selectedCourse;

    void CloseModal()
    {
        showModal = false;
    }

    string GetFormattedTime(int minutes)
    {
        int hours = minutes / 60;
        int mins = minutes % 60;
        return $"{hours} hours {mins} minutes";
    }

    string GetLogBackgroundColor(ProgressLog log, Course course)
    {
        int studyTimeNeeded = GetStudyTimeNeededInMinutes(course);

        if (log.ProgressAdded < studyTimeNeeded)
        {
            return "red"; // Червоний, якщо менше необхідного часу
        }
        else if (log.ProgressAdded >= studyTimeNeeded && log.ProgressAdded < studyTimeNeeded * 2)
        {
            return "green"; // Зелений, якщо відповідає необхідному або менше ніж вдвічі
        }
        else
        {
            return "blue"; // Синій, якщо більше ніж вдвічі необхідного часу
        }
    }

    int GetStudyTimeNeededInMinutes(Course course)
    {
        int remainingDuration = TotalDurationInMinutes(course) - CompletedDurationInMinutes(course);
        int remainingDays = (int)Math.Ceiling((course.EndDate - DateTime.Now).TotalDays);
        if (remainingDays <= 0) remainingDays = 1;

        double studyTimePerDay = (double)remainingDuration / remainingDays;

        return (int)studyTimePerDay;
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadFromLocalStorage();
        StateHasChanged(); // Оновлюємо компоненти після завантаження даних
    }

    async Task DeleteCourse(Course course)
    {
        courses.Remove(course);
        await UpdateCourseData();
    }

    async Task SaveToLocalStorage()
    {
        try
        {
            var jsonData = JsonSerializer.Serialize(courses);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "courses", jsonData);
            Console.WriteLine("Data successfully saved to localStorage!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving data: {ex.Message}");
        }
    }

    async Task LoadFromLocalStorage()
    {
        try
        {
            var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "courses");
            if (!string.IsNullOrEmpty(json))
            {
                courses = JsonSerializer.Deserialize<List<Course>>(json);
                Console.WriteLine("Data loaded from localStorage.");
            }
            else
            {
                Console.WriteLine("No data found in localStorage.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    void AddCourse()
    {
        showModal = true;
    }

    async Task SaveCourse()
    {
        newCourse.Duration = TimeSpan.FromHours(newCourse.DurationHours) + TimeSpan.FromMinutes(newCourse.DurationMinutes);
        courses.Add(newCourse);
        newCourse = new Course();
        showModal = false;
        await UpdateCourseData();
    }

    async Task UpdateCourseData()
    {
        await SaveToLocalStorage();
        StateHasChanged(); // Оновлюємо компоненти після оновлення даних
    }

    int TotalDurationInMinutes(Course course)
    {
        return (int)course.Duration.TotalMinutes;
    }

    int CompletedDurationInMinutes(Course course)
    {
        return (course.CompletedHours * 60) + course.CompletedMinutes;
    }

    async Task UpdateProgress(Course course)
    {
        // Перевіряємо чи був уже виконаний Update Progress на поточну дату
        if (course.ProgressLogs.Any(log => log.Date.Date == DateTime.Today))
        {
            Console.WriteLine("Update Progress has already been executed for today!");
            return;
        }

        int additionalHours = course.ProgressToAddHours;
        int additionalMinutes = course.ProgressToAddMinutes;

        int totalProgressMinutes = (additionalHours * 60) + additionalMinutes;

        int totalCompletedMinutes = CompletedDurationInMinutes(course) + totalProgressMinutes;

        course.CompletedHours = totalCompletedMinutes / 60;
        course.CompletedMinutes = totalCompletedMinutes % 60;

        course.ProgressToAddHours = 0;
        course.ProgressToAddMinutes = 0;

        // Додаємо новий лог про запуск Update Progress на поточну дату
        course.ProgressLogs.Add(new ProgressLog
            {
                Date = DateTime.Today,
                ProgressAdded = totalProgressMinutes
            });

        await UpdateCourseData();
    }

    string ProgressPercentage(Course course)
    {
        double percentage = (double)CompletedDurationInMinutes(course) / TotalDurationInMinutes(course) * 100;
        return $"{percentage:F2}%";
    }

    string StudyTimeNeeded(Course course)
    {
        int remainingDuration = TotalDurationInMinutes(course) - CompletedDurationInMinutes(course);
        int remainingDays = (int)Math.Ceiling((course.EndDate - DateTime.Now).TotalDays);
        if (remainingDays <= 0) remainingDays = 1; // Уникнення ділення на нуль або від'ємних значень

        double studyTimePerDay = (double)remainingDuration / remainingDays;

        int studyHours = (int)(studyTimePerDay / 60);
        int studyMinutes = (int)(studyTimePerDay % 60);

        return $"{studyHours} hours {studyMinutes} minutes per day";
    }

    int DaysLeft(Course course)
    {
        int remainingDays = (int)Math.Ceiling((course.EndDate - DateTime.Now).TotalDays);
        return remainingDays > 0 ? remainingDays : 0;
    }

    void ShowProgressLogs(Course course)
    {
        selectedCourse = course;
        showLogsModal = true;
    }

    void CloseLogsModal()
    {
        showLogsModal = false;
    }

    public class Course
    {
        public string Name { get; set; }
        public DateTime EndDate { get; set; }
        public TimeSpan Duration { get; set; }
        public int DurationHours { get; set; }
        public int DurationMinutes { get; set; }
        public int CompletedHours { get; set; }
        public int CompletedMinutes { get; set; }
        public int ProgressToAddHours { get; set; }
        public int ProgressToAddMinutes { get; set; }
        public List<ProgressLog> ProgressLogs { get; set; } = new List<ProgressLog>();
    }

    public class ProgressLog
    {
        public DateTime Date { get; set; }
        public int ProgressAdded { get; set; }
    }
}
